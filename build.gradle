plugins {
    id 'java'
    id 'application'
    id 'org.beryx.runtime' version '1.12.7'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
    id 'pl.allegro.tech.build.axion-release' version '1.14.3'

}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

group = 'ch.admin.bar'
description = 'SIARD Suite'

version = scmVersion.version

java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8
mainClassName = "ch.admin.bar.siardsuite.Launcher"
applicationName = "SIARD-Suite"

manifest {
    attributes(
            'Implementation-Version': version
    )
}

dependencies {

    implementation 'org.glavo.materialfx:materialfx:11.13.5'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'

    // legacy: add all dependencies from lib folder
    implementation fileTree(include: ['*.jar'], dir: 'lib')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(JavaExec) {
    jvmArgs("--add-opens=java.xml/com.sun.org.apache.xerces.internal.jaxp=ALL-UNNAMED", "--add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED", "--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED", "--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED")
}

// task to create an exectutable jar file with all necessary dependencies included and signature files removed.
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes "Main-Class": "ch.admin.bar.siardsuite.SiardApplication"
    }
    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    with jar
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']

    launcher {
        noConsole = true
    }

    additive = true
    modules = [
            'java.logging',
            'java.sql',
            'java.management',
            'java.naming'
    ]

    imageZip = file("$buildDir/image-zip/SIARD-Suite.${version}.zip")

    def currentOs = org.gradle.internal.os.OperatingSystem.current()
    if (currentOs.windows) {
        imageZip = file("$buildDir/image-zip/SIARD-Suite.${version}-win.zip")
    } else if (currentOs.linux) {
        imageZip = file("$buildDir/image-zip/SIARD-Suite.${version}-linux.zip")
    } else if (currentOs.macOsX) {
        imageZip = file("$buildDir/image-zip/SIARD-Suite.${version}-mac.zip")
    }

    jpackage {
        imageName = "SIARD-Suite"
        installerName = "SIARD-Suite"
        appVersion = version

        skipInstaller = false

        def imgType = currentOs.windows ? 'ico' : currentOs.macOsX ? 'icns' : 'png'
        imageOptions += ['--icon', "src/main/resources/ch/admin/bar/siardsuite/icons/archive.png"]

        installerOptions += ['--resource-dir', "src/main/resources"]
        installerOptions += ['--vendor', 'BUAR']
        if (currentOs.windows) {
            installerOptions += ['--win-per-user-install', '--win-dir-chooser', '--win-menu', '--win-shortcut']
        } else if (currentOs.linux) {
            installerType = "deb"
            installerOptions += ['--linux-package-name', 'siard-suite', '--linux-shortcut']
        } else if (currentOs.macOsX) {
            installerOptions += ['--mac-package-name', 'siard-suite']
        }
    }
}

test {
    useJUnitPlatform()
    // run tets in headless mode -for testFX
    jvmArgs "-Djava.awt.headless=true", "-Dtestfx.headless=true", "--add-opens=java.xml/com.sun.org.apache.xerces.internal.jaxp=ALL-UNNAMED", "--add-opens=java.xml/com.sun.org.apache.xalan.internal.xsltc.trax=ALL-UNNAMED", "--add-opens=javafx.graphics/com.sun.javafx.application=ALL-UNNAMED", "--add-opens=javafx.graphics/com.sun.glass.ui=ALL-UNNAMED"
}


application {
    mainClass = mainClassName
}

// create additional scripts for siardcmd...
// see https://stackoverflow.com/a/62069262/1310321

task siardFromDb(type: CreateStartScripts) {
    applicationName = "siard-from-db"
    mainClass = 'ch.admin.bar.siard2.cmd.SiardFromDb'
    outputDir = file("build/scripts")
    classpath = project.tasks.getAt(JavaPlugin.JAR_TASK_NAME).outputs.files.plus(project.configurations.getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME))
    // I took this from ApplicationPlugin.java:129
}

task siardToDb(type: CreateStartScripts) {
    applicationName = "siard-to-db"
    mainClass = 'ch.admin.bar.siard2.cmd.SiardToDb'
    outputDir = file("build/scripts")
    classpath = project.tasks.getAt(JavaPlugin.JAR_TASK_NAME).outputs.files.plus(project.configurations.getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME))
    // I took this from ApplicationPlugin.java:129
}

siardFromDb {
    dependsOn(siardToDb)
}

distZip {
    dependsOn(siardFromDb)
}


asciidoctor {
    languages 'en', 'de', 'fr', 'it'
    baseDirFollowsSourceDir()

    sourceDir 'docs/user-manual/'
    outputDir file('build/docs')
    sources {
        include 'user-manual.adoc'
    }
}


asciidoctorPdf {
    languages 'en', 'de', 'fr', 'it'
    baseDirFollowsSourceDir()

    outputDir 'build/docs/pdf'
    sourceDir 'docs/user-manual/'

    pdfThemes {
        local 'basic', {
            themeDir = 'docs/theme'
            themeName = 'siard-theme'
        }
    }

    asciidoctorj {
        attributes 'media': 'press',
                'styles-dir': 'docs/theme',
                'stylesheet':  'siard-theme.css',
                'source-highlighter': 'coderay',
                'imagesdir': 'images',
                'toc': 'left'
    }

}  dependsOn(asciidoctor)


task copyDocumentation(type: Copy) {
    from layout.buildDirectory.dir("docs/pdf")
    into layout.projectDirectory.dir('./src/main/resources/ch/admin/bar/siardsuite/doc')
} dependsOn(asciidoctorPdf)

tasks.named("asciidoctorPdf") { finalizedBy(copyDocumentation)}
tasks.named("build") { dependsOn(asciidoctorPdf)}
tasks.named("processResources") { dependsOn(copyDocumentation)}
