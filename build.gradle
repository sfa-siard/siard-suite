plugins {
    id 'java'
    id 'application'
    id 'org.asciidoctor.jvm.convert' version '3.3.2'
    id 'org.asciidoctor.jvm.pdf' version '3.3.2'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

group = 'ch.admin.bar'
version = '1.0-SNAPSHOT'
description = 'SIARD Suite'
java.sourceCompatibility = JavaVersion.VERSION_1_8
java.targetCompatibility = JavaVersion.VERSION_1_8
mainClassName = "ch.admin.bar.siardsuite.Launcher"

manifest {
    attributes(
            'Implementation-Version': version
    )
}

dependencies {

    testImplementation 'org.junit.jupiter:junit-jupiter:5.9.0'
    testImplementation "org.testfx:testfx-core:4.0.16-alpha"
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'

    // legacy: add all dependencies from lib folder
    implementation fileTree(include: ['*.jar'], dir: 'lib')
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


// task to create an exectutable jar file with all necessary dependencies included and signature files removed.
task fatJar(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes "Main-Class": "ch.admin.bar.siardsuite.SiardApplication"
    }
    from { (configurations.runtimeClasspath).collect { it.isDirectory() ? it : zipTree(it) } } {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
    with jar
}

test {
    useJUnitPlatform()
    // run tets in headless mode -for testFX
    jvmArgs "-Djava.awt.headless=true", "-Dtestfx.headless=true"
}


application {
    mainClass = mainClassName
}

// create additional scripts for siardcmd...
// see https://stackoverflow.com/a/62069262/1310321

task siardFromDb(type: CreateStartScripts) {
    applicationName = "siard-from-db"
    mainClass = 'ch.admin.bar.siard2.cmd.SiardFromDb'
    outputDir = file("build/scripts")
    classpath = project.tasks.getAt(JavaPlugin.JAR_TASK_NAME).outputs.files.plus(project.configurations.getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME))
    // I took this from ApplicationPlugin.java:129
}

task siardToDb(type: CreateStartScripts) {
    applicationName = "siard-to-db"
    mainClass = 'ch.admin.bar.siard2.cmd.SiardToDb'
    outputDir = file("build/scripts")
    classpath = project.tasks.getAt(JavaPlugin.JAR_TASK_NAME).outputs.files.plus(project.configurations.getByName(JavaPlugin.RUNTIME_CLASSPATH_CONFIGURATION_NAME))
    // I took this from ApplicationPlugin.java:129
}

siardFromDb {
    dependsOn(siardToDb)
}

installDist {
    dependsOn(siardFromDb)
}


asciidoctor {
    languages 'en', 'de', 'fr', 'it'
    baseDirFollowsSourceDir()

    sourceDir 'docs/user-manual/'
    outputDir file('build/docs')
    sources {
        include 'user-manual.adoc'
    }
}


asciidoctorPdf {
    languages 'en', 'de', 'fr', 'it'
    baseDirFollowsSourceDir()

    outputDir 'build/docs/pdf'
    sourceDir 'docs/user-manual/'

    pdfThemes {
        local 'basic', {
            themeDir = 'docs/theme'
            themeName = 'siard-theme'
        }
    }

    asciidoctorj {
        attributes 'media': 'press',
                'styles-dir': 'docs/theme',
                'stylesheet':  'siard-theme.css',
                'source-highlighter': 'coderay',
                'imagesdir': 'images',
                'toc': 'left'
    }

}  dependsOn(asciidoctor)


task copyDocumentation(type: Copy) {
    from layout.buildDirectory.dir("docs/pdf")
    into layout.projectDirectory.dir('./src/main/resources/ch/admin/bar/siardsuite/doc')
} dependsOn(asciidoctorPdf)

tasks.named("asciidoctorPdf") { finalizedBy(copyDocumentation)}
tasks.named("build") { dependsOn(asciidoctorPdf)}
tasks.named("processResources") { dependsOn(copyDocumentation)}