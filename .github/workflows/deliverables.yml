# understands how to build platform specific binaries that ship with the necessary java runtime
name: Create standalone deliverables for SIARD (installers and distributions with runtimes)

on:
  push:
    tags:
      - v*.**

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set TAG-Env
        run: echo "NAME_TAG=SIARD-Suite-${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'
          java-package: "jdk+fx"
          cache: "gradle"
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Show current application version
        run: ./gradlew cV
      - name: Execute Gradle build
        run: ./gradlew build -Djava.awt.headless=true -Dtestfx.headless=true --no-daemon
      - name: upload zip archive
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}
          path: build/distributions/SIARD-Suite-*.zip
      - name: upload siard-manual.pdf
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-Manual
          path: build/docs/pdf/siard-manual.pdf

  native-packages:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        java: [ '17' ]
      fail-fast: false
    name: ${{ matrix.os }}
    steps:
      - name: Git checkout
        uses: actions/checkout@v3
      - name: Set TAG-Env
        if: runner.os == 'Linux' || runner.os == 'macOS'
        run: echo "NAME_TAG=SIARD-Suite-${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Set TAG-Env Windows
        if: runner.os == 'Windows'
        run: echo "NAME_TAG=SIARD-Suite-${{ github.ref_name }}" >> $env:GITHUB_ENV
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'zulu'
          java-package: "jdk+fx"
          cache: "gradle"
      - name: Echo JAVA_HOME
        run: echo $JAVA_HOME
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Execute build runtimeZip jpackage
        run: ./gradlew build runtimeZip jpackage --no-daemon
      - name: Upload DMG as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-${{ runner.os }}-dmg
          path: build/jpackage/*.dmg
          if-no-files-found: ignore
      - name: Upload EXE as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-win-exe
          path: build/jpackage/*.exe
          if-no-files-found: ignore
      - name: Upload MSI as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-win-msi
          path: build/jpackage/*.msi
          if-no-files-found: ignore
      - name: Upload DEB as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-${{ runner.os }}-deb
          path: build/jpackage/*.deb
          if-no-files-found: ignore
      - name: Upload RPM as an artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-${{ runner.os }}-rpm
          path: build/jpackage/*.rpm
          if-no-files-found: ignore
      - name: Upload application image zip
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.NAME_TAG }}-${{ runner.os }}
          path: build/image-zip/*.zip
